global   # 전역 섹션 프로세스 전체에 영향을 주는 내용
    log /dev/log    local0
    log 127.0.0.1   local1 notice
    chroot /var/lib/haproxy # 서비스 Jail 경로, 슈퍼유저로 실행시 모든 동작은 이 안에서만 수행 (보안 상승)
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s   #
    user haproxy    # 프로세스 사용자
    group haproxy   # 프로세스 그룹
    daemon  # 백그라운드로 동작
    maxconn 4000    # 프로세스당 최대 연결 개수

    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults    # front, back, listen에 관련된 전역 섹션
    log global           # 로그는 기본적으로 global 설정을 따르겠다는 옵션
    mode    http         # http 프로토콜을 사용하는 로드밸런싱 모드
    option  httplog      # 기본 Log는 SIP, DIP와 Name만 표기하므로 이 옵션을 사용해 좀 더 자세하게 출력
    option  dontlognull  # 로그 비대화 방지를 위해 Probe(정찰, 스캔)과 같은 잡다한 기록을 HAProxy Log화 하지않는 옵션
    option  forwardfor   # 클라이언트 정보 전달 (X-Forwarded-For 헤더를 넣어서 전달)
    option  httpclose    # keep-alive 문제 발생시 off 옵션
    timeout http-request 10s   # Request시의 헤더에만 적용, DDos 방어를 위해 HTTP 요청 타임아웃시간 설정 (클라이언트의 연결 타임아웃과는 무관한 HAProxy 서버>의 옵션임)
    timeout http-keep-alive 10s   # 클라이언트 요청에 따른 응답 전송 후 다음 요청 대기시간 설정 (http-request가 선행함)
    timeout connect 10s  # TCP 패킷 손실을 막기위한 Real 서버로의 연결 최대 지연시간 설정 (Backend에 적용되나 전역으로 설정 가능)
    timeout client  1m   # 외부 클라이언트 요청이나 데이터와의 연결 최대 시간 (Request와 같이 사용하여 서버 안정성을 구현)
    timeout server  1m   # 서버가 데이터를 승인하거나 전송해야할 때의 연결 최대 시간
    timeout queue   1m   # 서버의 maxconn 도달시 무한정 보류상태로 두지 않고 HTTP 503 응답을 보내면서 연결을 버리는 시간 설정 (Surge Queue Time)
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

listen stats_page   # Listen은 Front / Back의 연결 포트 / 옵션들을 정의함 (TCP 제어나 Proxy에 주로 사용)
    bind    *:8080  # 접속 포트 지정
    stats   enable  # 상태 페이지 활성화
    stats   realm HAProxy Statistics   # 브라우저 타이틀
    stats   uri /   # 접근할 URI 경로
    stats   auth admin:admin    # 인증 추가 (auth [User]:[Password])

frontend haproxy    # 클라이언트 연결을 받아들이는 소켓에 대한 설정 (WAF 기능에 가까움)
    bind    *:80    # 접속 포트 지정
    mode    http    # 프로토콜 유형 설정
    default_backend server  # Front서버에서 전달할 기본 backend

backend server  # Front에서 들어온 연결에 할당될 프록시 서버들에 대한 설정
    mode    http            # 프로토콜 유형 설정
    balance roundrobin      # LoadBalancer 유형 설정
    cookie  SVID insert indirect nocache maxlife 10m    # Sticky Session 설정 (maxlife는 유지기간 설정)
    option  httpchk GET /   # healthcheck uri로 GET 뒤의 경로에 curl 명령으로 http header 값 [200 OK] 확인 (server 옵션에서 inter값으로 주기 설정)
    http-check expect status 200    # http check시 header 값이 200이면 정상을 의미
    server web01 192.168.50.11:80 cookie web01 check inter 3000 rise 2 fall 5   # real server
    server web02 192.168.50.12:80 cookie web02 check inter 3000 rise 2 fall 5   # real server
# server [host명] [ip]:[port] cookie [서버쿠키명] check inter [주기(m/s)] rise [서버구동여부점검횟수] fall [서비스중단]
# inter는 ms단위이며 값이 2000이면 2초
# rise는 서버 정상 동작 체크로 2로 설정시 2번 정상 체크되면 정상으로 간주
# fall은 서버 실패 동작 체크로 5로 설정시 5번 정상 체크에 실패하면 서버를 비정상으로 간주
